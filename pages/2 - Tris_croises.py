import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px
import numpy as np
from prince import MCA
from sklearn.cluster import KMeans

DATA_PATH = 'data/raw.csv'

@st.cache_data
def load_data():
    return pd.read_csv(DATA_PATH).drop(columns=["Horodateur"])

st.header("ü§û Tris Crois√©s Bivari√©s")

# Chargement
df = load_data()
cols = df.columns.tolist()
# 1) D√©finissez le callback qui √©change les valeurs
def swap_vars():
    st.session_state.x, st.session_state.y = st.session_state.y, st.session_state.x

# 2) Cr√©ez le bouton AVANT les selectbox, en lui passant ce callback
st.button("‚ÜîÔ∏è Inverser X et Y", on_click=swap_vars, key="swap_btn")

# 3) Maintenant seulement, on instancie les widgets li√©s √† session_state.x et .y
cols = df.columns.tolist()
var1 = st.selectbox("Variable X¬†:", cols, key='x')
cols_y = [c for c in cols if c != var1]
var2 = st.selectbox("Variable Y¬†:", cols_y, key='y')

# Table de contingence
ctab = pd.crosstab(df[var1], df[var2], normalize='index')
st.subheader("Table de contingence")
st.dataframe(ctab)

# Calcul des proportions globales de la population
global_props = df[var2].value_counts(normalize=True)

# Choix du type de viz
viz = st.selectbox(
    "Type de visualisation :",
    [
        "Mosaic Plot",
        "Segmented Bar Chart",
        "Balloon Plot",
        "Parallel Sets",
        "Divergent Bar"
    ]
)


# 1. Mosaic Plot (Treemap)
if viz == "Mosaic Plot":
    st.subheader("Mosaic Plot (Treemap) avec √©cart √† la population g√©n√©rale")
    # Calculer proportions conditionnelles et diff√©rences
    ct = pd.crosstab(df[var1], df[var2], normalize='index')
    df_ct = ct.reset_index().melt(id_vars=[var1], var_name=var2, value_name='prop')
    df_ct['global'] = df_ct[var2].map(global_props)
    df_ct['diff'] = df_ct['prop'] - df_ct['global']
    # Treemap : taille = prop (count implicite) ; couleur = diff
    fig = px.treemap(
        df_ct,
        path=[var1, var2],
        values='prop',
        color='diff',
        color_continuous_midpoint=0,
        labels={'prop': 'Prop. cond.', 'diff': '√âcart √† global'}
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("""
    ### Comment lire ce graphique :

    üö® Attention aux √©chelles, parfois tr√®s faibles, des grandes diff√©rences apparaissent peut √™tre pour une diff√©rence r√©elle faible

    Structure¬†: chaque rectangle repr√©sente la combinaison d‚Äôune modalit√© de X (axe principal) et d‚Äôune modalit√© de Y (feuillet).

    Taille¬†: proportion conditionnelle de Y au sein de chaque modalit√© de X (plus le rectangle est grand, plus cette combinaison est fr√©quente).

    Couleur¬†: √©cart √† la proportion globale de la modalit√© de Y¬†; les teintes chaudes (positives) signent une surrepr√©sentation, les teintes froides (n√©gatives) une sous-repr√©sentation.

    Lecture¬†: rep√©rer les gros rectangles pour savoir quelles associations dominent, et leur coloration pour voir si elles sont proportionnellement plus ou moins fr√©quentes que dans l‚Äôensemble de la population."""
    )
# 2. Segmented Bar Chart
elif viz == "Segmented Bar Chart":
    st.subheader("Segmented Bar Chart avec barre de population g√©n√©rale")
    ctab = pd.crosstab(df[var1], df[var2], normalize='index')
    # Ajouter une ligne pour la population g√©n√©rale
    ctab.loc['Population g√©n√©rale'] = global_props
    df_bar = ctab.reset_index().melt(id_vars=[var1], var_name=var2, value_name='proportion')
    fig = px.bar(
        df_bar,
        x=var1,
        y='proportion',
        color=var2,
        barmode='stack',
        labels={'proportion':'Proportion'}
    )
    fig.update_yaxes(tickformat='.0%')
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("""
    ### Comment lire ce graphique :

    üö® Attention aux √©chelles, parfois tr√®s faibles, des grandes diff√©rences apparaissent peut √™tre pour une diff√©rence r√©elle faible

    Structure¬†: pour chaque modalit√© de X, une barre empil√©e d√©compose la r√©partition de Y.

    Hauteur totale¬†: 100¬†% (proportions conditionnelles normalis√©es).

    Lecture¬†:

    Comparez la composition interne de chaque barre X avec celle de la barre g√©n√©rale.

    Rep√©rez si certaines cat√©gories de Y sont surrepr√©sent√©es dans un groupe X (segments plus larges que dans la barre g√©n√©rale).
    """
    )

# 3. Balloon Plot
elif viz == "Balloon Plot":
    st.subheader("Balloon Plot avec s√©rie de ballons pour population g√©n√©rale")
    # Proportions conditionnelles
    ct = pd.crosstab(df[var1], df[var2], normalize='index')
    # Ajouter une ligne pour la population g√©n√©rale
    ct.loc['Population g√©n√©rale'] = global_props
    heat = ct.reset_index().melt(id_vars=[var1], var_name=var2, value_name='p')
    # Scatter : taille = proportion, s√©rie distincte pour chaque niveau de var1 (dont population g√©n√©rale)
    fig = px.scatter(
        heat,
        x=var2,
        y=var1,
        size='p',
        size_max=50,
        labels={'p': 'Proportion'}
    )
    fig.update_traces(marker=dict(opacity=0.7))
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("""
    ### Comment lire ce graphique :
    
    üö® Attention aux √©chelles, parfois tr√®s faibles, des grandes diff√©rences apparaissent peut √™tre pour une diff√©rence r√©elle faible

    Structure¬†: un nuage de points dispos√© en grille, axes X = modalit√©s de Y, axes Y = modalit√©s de X (dont ¬´¬†Population g√©n√©rale¬†¬ª).

    Taille des bulles¬†: proportion de Y dans chaque modalit√© de X.

    S√©ries distinctes¬†: une rang√©e de bulles repr√©sente toujours la population g√©n√©rale ou une modalit√© de X donn√©e.

    Lecture¬†:

    Comparez facilement les bulles d‚Äôune m√™me colonne (modalit√© Y) pour voir o√π la proportion est la plus forte.

    Rep√©rez la bulle de la population g√©n√©rale comme r√©f√©rence visuelle (si elle appara√Æt plus grande ou plus petite que les autres).

    Des bulles tr√®s petites signalent des associations rares, des bulles tr√®s grandes des associations fr√©quentes.
    """
    )

# 6. Parallel Sets
elif viz == "Parallel Sets":
    st.subheader("Parallel Sets (Parallel Categories)")
    fig = px.parallel_categories(
    df,
    dimensions=[var1, var2]
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("""
    ### Comment lire ce graphique :
    
    üö® Attention aux √©chelles, parfois tr√®s faibles, des grandes diff√©rences apparaissent peut √™tre pour une diff√©rence r√©elle faible

    Structure¬†: deux axes verticaux repr√©sentant X et Y, reli√©s par des flux (cordes).

    √âpaisseur des flux¬†: proportion conditionnelle de chaque modalit√© Y au sein de chaque modalit√© X.

    Couleur (optionnelle)¬†: √©cart √† la proportion globale (le gradient accentue les flux sur‚Äë ou sous‚Äërepr√©sent√©s).

    Lecture¬†:

    Suivez visuellement l‚Äô√©paisseur des cordes de X vers Y pour comprendre les transitions.

    Les connexions √©paisses pointent les associations majeures.

    La comparaison des couleurs ou largeurs permet de d√©tecter les biais par rapport √† la distribution globale.
        """
    )


# 8. Divergent Bar
elif viz == "Divergent Bar":
    st.subheader("Divergent Bar")
    mod2 = st.selectbox(f"Modalit√© de {var2}¬†:", df[var2].unique())
    cond = df.groupby(var1).apply(lambda g: (g[var2] == mod2).mean())
    overall = (df[var2] == mod2).mean()
    diff = (cond - overall).reset_index(name='diff')
    fig = px.bar(
        diff, x='diff', y=var1, orientation='h',
        color='diff', color_continuous_midpoint=0,
        labels={'diff': '√âcart √† global'}
    )
    st.plotly_chart(fig, use_container_width=True)
    st.markdown("""
    ### Comment lire ce graphique :

    üö® Attention aux √©chelles, parfois tr√®s faibles, des grandes diff√©rences apparaissent peut √™tre pour une diff√©rence r√©elle faible

    Structure¬†: pour une modalit√© choisie de Y, barre horizontale pour chaque modalit√© de X repr√©sentant l‚Äô√©cart (positif ou n√©gatif) √† la proportion globale.

    Lecture¬†:

    Identifiez tr√®s vite les groupes X o√π la modalit√© Y est surrepr√©sent√©e (barres positives les plus longues).

    Inversement, rep√©rez les sous‚Äërepr√©sentations (barres n√©gatives).
        """
    )


st.sidebar.markdown(
    """
    <div class="sidebar-footer"> Ici on croit en l'open source ‚ù§Ô∏è \n

    Retrouvez le code ici :
      <a href="https://github.com/KrrCharles" target="_blank">
        <i class="fab fa-github"></i> View on GitHub
      </a>

      N'h√©sitez pas √† contribuer directement ou √† remonter des bugs

      Site r√©alis√© par
      <a href="https://github.com/KrrCharles" target="_blank">
        <i class="fab fa-github"></i> @KrrCharles
      </a>

      Sur la base du projet de
      <a href="https://x.com/eloivar" target="_blank">
        <i class="fab fa-github"></i> @eloivar
      </a>
    </div>
    """,
    unsafe_allow_html=True,
)